from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import requests
import json
import sys
import time
import os
import asyncio

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, BIRTHDATE, GOAL = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
developer_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[
        InlineKeyboardButton(
            text="üõ†Ô∏è GitHub",
            url="https://github.com/bayanist"
        ),
        InlineKeyboardButton(
            text="üí¨ Telegram",
            url="https://t.me/bayanman"
        )
    ]]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
TELEGRAM_TOKEN = "–¢–í–û–ô"
GEMINI_API_KEY = "–¢–í–û–ô"
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –§–ò–û"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
    await update.message.reply_text(
        "üí¨ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –¢–∏—Ç–æ–≤ –ê–Ω—Ç–æ–Ω",
        reply_markup=developer_keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û. —Ä–µ–±—ë–Ω–∫–∞:"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    return BIRTHDATE

async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Ü–µ–ª–∏"""
    context.user_data['birthdate'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —Ä–∞–±–æ—Ç—ã:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–≤—ã—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ '–Ø' –æ–±—Ä–∞–∑–∞"
    )
    return GOAL

async def generate_content_with_progress(update, prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        status_message = await update.message.reply_text("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "contents": [{
                "parts":[{
                    "text": prompt
                }]
            }]
        }
        
        headers = {
            'Content-Type': 'application/json'
        }

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            test_payload = {
                "contents": [{
                    "parts":[{
                        "text": "test connection"
                    }]
                }]
            }
            
            test_response = requests.post(
                GEMINI_API_URL,
                headers=headers,
                json=test_payload,
                timeout=10
            )
            test_response.raise_for_status()
            await status_message.edit_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω...")
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_response.text if 'test_response' in locals() else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
            return None

        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        try:
            response = requests.post(
                GEMINI_API_URL,
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            response_data = response.json()
            print(f"–û—Ç–≤–µ—Ç API: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            
            if 'candidates' in response_data and len(response_data['candidates']) > 0:
                content = response_data['candidates'][0].get('content', {})
                parts = content.get('parts', [])
                if parts and 'text' in parts[0]:
                    text = parts[0]['text']
                    await status_message.edit_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    return text
            
            raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text if 'response' in locals() else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
            return None

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return None

async def generate_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é Gemini API"""
    try:
        # –ï—Å–ª–∏ —Ü–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ reset) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'goal' in context.user_data and update.message.text == '/reset':
            goal = context.user_data['goal']
        else:
            goal = update.message.text
            context.user_data['goal'] = goal
        
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ '{goal}', —Å–æ—Å—Ç–∞–≤—å —Ç–∞–±–ª–∏—Ü—É —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏:
        1. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç—É —Ü–µ–ª—å).
        2. –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º/—Ä–∞–∑–≤–∏–≤–∞–µ–º).
        3. –¢–µ–º—ã –∑–∞–Ω—è—Ç–∏–π (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∞–º).

        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
        ---
        –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–≤–æ–ª–µ–≤–æ–π —Å—Ñ–µ—Ä—ã | –†–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ | –ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?, –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∏–ª–∞ –≤–æ–ª–∏?
        ---
        –û—Ç–≤–µ—Ç –¥–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        """

        generated_text = await generate_content_with_progress(update, prompt)
        
        if not generated_text:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_text("üìù –°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        doc = Document()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–ø–∫—É –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        school_name = doc.add_paragraph('–ì–ë–û–£ ¬´–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è —à–∫–æ–ª–∞-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç ¬´–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ¬ª¬ª')
        school_name.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        school_name.runs[0].bold = True
        
        title = doc.add_paragraph('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –ø–µ–¥–∞–≥–æ–≥–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞')
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        title.runs[0].bold = True
        
        teacher_name = doc.add_paragraph('–¢–µ–≤—Ñ–∏–∫–æ–≤–æ–π –ê–Ω–Ω—ã –ù–∏–∫–æ–ª–∞–µ–≤–Ω—ã –Ω–∞ 2024-2025 —É—á–µ–±–Ω—ã–π –≥–æ–¥')
        teacher_name.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        teacher_name.runs[0].bold = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        doc.add_paragraph(f'–§.–ò.–û.: {context.user_data["name"]}')
        doc.add_paragraph(f'–ö–ª–∞—Å—Å: [—É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å]')  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∞ –≤ –¥–∏–∞–ª–æ–≥–µ
        doc.add_paragraph(f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data["birthdate"]}')
        doc.add_paragraph(f'–¶–µ–ª—å: {context.user_data["goal"]}')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = doc.add_table(rows=1, cols=6)
        table.style = 'Table Grid'

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = ['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–¢–µ–º—ã', '–ö–æ–ª-–≤–æ –∑–∞–Ω—è—Ç–∏–π', '–î–∏–Ω–∞–º–∏–∫–∞ (—è–Ω–≤–∞—Ä—å)', '–î–∏–Ω–∞–º–∏–∫–∞ (–º–∞–π)']
        for i, header in enumerate(headers):
            table.rows[0].cells[i].text = header

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        lines = generated_text.split("\n")
        for line in lines:
            if line.strip():
                parts = line.split("|")
                if len(parts) == 3:
                    row_cells = table.add_row().cells
                    row_cells[0].text = parts[0].strip()
                    row_cells[1].text = parts[1].strip()
                    row_cells[2].text = parts[2].strip()
                    row_cells[3].text = " "
                    row_cells[4].text = " "
                    row_cells[5].text = " "

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        filename = f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π_–ø–ª–∞–Ω_{context.user_data["name"].replace(" ", "_")}.docx'
        doc.save(filename)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
        await update.message.reply_document(
            document=open(filename, 'rb'),
            filename=filename
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π /start\nüîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω /reset"
        )
        
        return ConversationHandler.END

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return ConversationHandler.END

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not all(key in context.user_data for key in ['name', 'birthdate', 'goal']):
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

    await update.message.reply_text("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é –ø–ª–∞–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    return await generate_plan(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API...")
        print(f"URL API: {GEMINI_API_URL}")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        try:
            test_payload = {
                "contents": [{
                    "parts":[{
                        "text": "test connection"
                    }]
                }]
            }
            
            test_response = requests.post(
                GEMINI_API_URL,
                headers={'Content-Type': 'application/json'},
                json=test_payload,
                timeout=10
            )
            test_response.raise_for_status()
            response_data = test_response.json()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API —É—Å–ø–µ—à–Ω–æ!")
            print(f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API: {str(e)}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {test_response.text if 'test_response' in locals() else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
            sys.exit(1)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start), CommandHandler('reset', reset)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
                BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthdate)],
                GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_plan)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        application.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == '__main__':
    main()
